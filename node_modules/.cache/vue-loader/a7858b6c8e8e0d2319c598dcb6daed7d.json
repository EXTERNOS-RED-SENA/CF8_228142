{"remainingRequest":"/home/runner/work/CF8_228142/CF8_228142/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF8_228142/CF8_228142/src/views/Tema1.vue?vue&type=template&id=a9acf3c4&lang=pug","dependencies":[{"path":"/home/runner/work/CF8_228142/CF8_228142/src/views/Tema1.vue","mtime":1733889503075},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF8_228142/CF8_228142/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}